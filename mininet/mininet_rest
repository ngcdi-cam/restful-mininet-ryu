#!/bin/bash

# Startup script for Mininet REST

BASE_DIR="$(dirname $0)"
MN_CLI_COMMAND="restful_api $MN_RESTFUL_HOST $MN_RESTFUL_PORT"
PID_FILE=/run/mininet_rest.pid

ENDLINE=$'\n'

source "$BASE_DIR/mininet_rest.conf"

for controller in $MN_CONTROLLERS; do
	IFS=: read -ra controller_tuple <<< "$controller"
	controller_host="${controller_tuple[0]}"
	controller_ip="$(getent ahostsv4 "$controller_host" | head -n1 | awk '{print $1}')"
	if [ -z "$controller_ip" ]; then
		echo "Error: cannot resolve controller hostname $controller_host"
		exit 1
	fi
	controller_port="${controller_tuple[1]}"
	controller_port="${controller_port:-6653}"
	MN_CONTROLLER_ARGS+=("--controller" "remote,ip=$controller_ip,port=$controller_port")
done

prestart() {
	cd "$BASE_DIR"
	if ! pgrep -x ovs-vswitchd > /dev/null; then
		service openvswitch-switch start
	fi
	mn --clean
}

MN_CMDLINE=(mn \
	--custom "$MN_CUSTOM" \
	${MN_TOPO:+"--topo" "$MN_TOPO"} \
	"${MN_CONTROLLER_ARGS[@]}" \
	--switch "${MN_SWITCH:-ovsk},protocols=OpenFlow13" \
	$MN_EXT_FLAGS)

start_foreground() {
	prestart
	echo "Starting mininet: ${MN_CMDLINE[@]}"
	exec "${MN_CMDLINE[@]}" <<< "$MN_CLI_COMMAND $MN_RESTFUL_ADDR $MN_RESTFUL_PORT"
}

start_cli() {
	prestart
	exec "${MN_CMDLINE[@]}"
}

start_xterm_and_rest() {
	prestart
	exec "${MN_CMDLINE[@]}" <<< "xterm h1 h2$ENDLINE$MN_CLI_COMMAND $MN_RESTFUL_ADDR $MN_RESTFUL_PORT"
}

start() {
	start-stop-daemon --make-pidfile --pidfile "$PID_FILE" --startas "$PWD/$0" --background --start start-foreground
}

stop() {
	start-stop-daemon --remove-pidfile --pidfile "$PID_FILE" --stop --retry INT/30/TERM/30/KILL/5
}

status() {
	start-stop-daemon --pidfile "$PID_FILE" --status
}

case "$1" in
	start)
		start
		;;
	start-fg | start-foreground)
		start_foreground
		;;
	cli)
		start_cli
		;;
	x)
		start_xterm_and_rest
		;;
	stop)
		stop
		;;
	status)
		status
		;;
	restart|reload|condrestart)
		stop
		start
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|reload|status|start-fg|cli|x}"
		exit 1
esac

exit 0
